<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://tales.sveri.de/' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
Sveris Tales
</title>
<link>
http://tales.sveri.de/
</link>
<description>
Everything about everything
</description>
<lastBuildDate>
Mon, 01 Jun 2015 15:27:56 +0200
</lastBuildDate>
<item>
<guid>
http://tales.sveri.de/posts/2015-05-31-tetris-5.html
</guid>
<link>
http://tales.sveri.de/posts/2015-05-31-tetris-5.html
</link>
<title>
Tetris in clojurescript and re-frame Part 5
</title>
<description>
 &lt;h2&gt;&lt;a name=&quot;tetriminio&amp;#95;types&quot;&gt;&lt;/a&gt;Tetriminio Types&lt;/h2&gt;&lt;p&gt;There are seven tetriminio types each one defined by a number from 1 to 7. &lt;ul&gt;&lt;li&gt;1 I&lt;/li&gt;&lt;li&gt;2 L&lt;/li&gt;&lt;li&gt;3 J&lt;/li&gt;&lt;li&gt;4 O&lt;/li&gt;&lt;li&gt;5 S&lt;/li&gt;&lt;li&gt;6 T&lt;/li&gt;&lt;li&gt;7 S&lt;/li&gt;&lt;/ul&gt;So when the grid contains the number 1 it will draw the &lt;strong&gt;I&lt;/strong&gt; type at that place.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Each Tetrimino has an orientation defined by numbers 0 to 4.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;tetriminio&amp;#95;drawing&amp;#95;definitions&quot;&gt;&lt;/a&gt;Tetriminio Drawing Definitions&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def tet-recipe
      {1 {0 &amp;#91;{:x #&amp;#40;- % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;+ % 2&amp;#41;}&amp;#93;
          1 &amp;#91;{:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 2&amp;#41;}&amp;#93;
          2 &amp;#91;{:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 2&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          3 &amp;#91;{:y #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;} {:y #&amp;#40;- % 2&amp;#41;}&amp;#93;}
       2 {0 &amp;#91;{:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;- % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;}&amp;#93;
          1 &amp;#91;{:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          2 &amp;#91;{:x #&amp;#40;- % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          3 &amp;#91;{:y #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;}
       3 {0 &amp;#91;{:x #&amp;#40;- % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;}&amp;#93;
          1 &amp;#91;{:y #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          2 &amp;#91;{:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;- % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;}&amp;#93;
          3 &amp;#91;{:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;}&amp;#93;}
       4 {0 &amp;#91;{} {:x #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          1 &amp;#91;{} {:x #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          2 &amp;#91;{} {:x #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          3 &amp;#91;{} {:x #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;}
       5 {0 &amp;#91;{:x #&amp;#40;- % 1&amp;#41;} {} {:y #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;}&amp;#93;
          1 &amp;#91;{:y #&amp;#40;+ % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          2 &amp;#91;{:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;} {:y #&amp;#40;- % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;}&amp;#93;
          3 &amp;#91;{:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;- % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;}&amp;#93;}
       6 {0 &amp;#91;{:x #&amp;#40;- % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;+ % 1&amp;#41;}&amp;#93;
          1 &amp;#91;{:y #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41;}&amp;#93;
          2 &amp;#91;{:x #&amp;#40;- % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          3 &amp;#91;{:y #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;- % 1&amp;#41;}&amp;#93;}
       7 {0 &amp;#91;{:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;+ % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;}&amp;#93;
          1 &amp;#91;{:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          2 &amp;#91;{:x #&amp;#40;- % 1&amp;#41;} {} {:y #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;+ % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;
          3 &amp;#91;{:y #&amp;#40;+ % 1&amp;#41;} {} {:x #&amp;#40;- % 1&amp;#41;} {:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;- % 1&amp;#41;}&amp;#93;}}&amp;#41;
          
&lt;/code&gt;&lt;/pre&gt;This is a map of a map of vecs containing anonymous functions for the type and orientation that will then be appliedin the function call drawing a specific tetriminio. The first key of the nested map is the tetriminio type and the second key the orientation.&lt;br /&gt;So whenever we want to draw type &lt;i&gt;S&lt;/i&gt; with orientation &lt;i&gt;0&lt;/i&gt; we will take this for functions:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;{:x #&amp;#40;- % 1&amp;#41; :y #&amp;#40;+ % 1&amp;#41;} {:y #&amp;#40;+ % 1&amp;#41;} {} {:x #&amp;#40;+ % 1&amp;#41;}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;{:x #(- % 1) :y #(+ % 1)} means that for the first block we will subtract x by 1 and add 1 to y.&lt;/li&gt;&lt;li&gt;{:y #(+ % 1)} Here we will add 1 to y and leave x like it is&lt;/li&gt;&lt;li&gt;{} Leave x and y like they are&lt;/li&gt;&lt;li&gt;{:x #(+ % 1)} Add 1 to x and leave y like it is.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This all is in respect to the grid state. So we just move the tetriminio on the grid by applying these functions.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;active&amp;#95;tetriminio&quot;&gt;&lt;/a&gt;Active Tetriminio&lt;/h2&gt;&lt;p&gt;The current active tetriminio (the one that can be moved) will be stored in the application state as a map like this: &lt;strong&gt;{:x 1 :y 1 :o 0 :t 1}&lt;/strong&gt;. So whenever we pass it around it will be passed as a map.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;sourcecode&quot;&gt;&lt;/a&gt;Sourcecode&lt;/h2&gt;
</description>
<pubDate>
Sun, 31 May 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://tales.sveri.de/posts/2015-05-31-tetris-4.html
</guid>
<link>
http://tales.sveri.de/posts/2015-05-31-tetris-4.html
</link>
<title>
Tetris in clojurescript and re-frame Part 4
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;drawing&amp;#95;functions&quot;&gt;&lt;/a&gt;Drawing functions&lt;/h2&gt;&lt;p&gt;There are several drawing functions.&lt;br /&gt; The first one is a helper function taking the canvas and a vector of functions that will be executed.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn draw-block-x &amp;#91;ctx &amp;amp; &amp;#91;line-to-fns&amp;#93;&amp;#93;
  &amp;#40;.beginPath ctx&amp;#41;
  &amp;#40;doseq &amp;#91;f line-to-fns&amp;#93; &amp;#40;f&amp;#41;&amp;#41;
  &amp;#40;.fill ctx&amp;#41;&amp;#41;
                     
&lt;/code&gt;&lt;/pre&gt;These four functions will draw the for single blocks that each tetrimino contains.   &lt;br /&gt;  &lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn draw-block-top &amp;#91;x y ctx&amp;#93;
  &amp;#40;draw-block-x ctx &amp;#91;#&amp;#40;.moveTo ctx x y&amp;#41;
                         #&amp;#40;.lineTo ctx &amp;#40;+ 20 x&amp;#41; y&amp;#41;
                         #&amp;#40;.lineTo ctx &amp;#40;+ 18 x&amp;#41; &amp;#40;+ 2 y&amp;#41;&amp;#41;
                         #&amp;#40;.lineTo ctx &amp;#40;+ 2 x&amp;#41; &amp;#40;+ 2 y&amp;#41;&amp;#41;&amp;#93;&amp;#41;&amp;#41;

&amp;#40;defn draw-block-left &amp;#91;x y ctx&amp;#93;
  &amp;#40;draw-block-x ctx &amp;#91;#&amp;#40;.moveTo ctx x y&amp;#41;
                     #&amp;#40;.lineTo ctx x &amp;#40;+ 20 y&amp;#41;&amp;#41;
                     #&amp;#40;.lineTo ctx &amp;#40;+ 2 x&amp;#41; &amp;#40;+ 18 y&amp;#41;&amp;#41;
                     #&amp;#40;.lineTo ctx &amp;#40;+ 2 x&amp;#41; &amp;#40;+ 2 y&amp;#41;&amp;#41;&amp;#93;&amp;#41;&amp;#41;

&amp;#40;defn draw-block-right &amp;#91;x y ctx&amp;#93;
  &amp;#40;draw-block-x ctx &amp;#91;#&amp;#40;.moveTo ctx &amp;#40;+ 20 x&amp;#41; y&amp;#41;
                     #&amp;#40;.lineTo ctx &amp;#40;+ 20 x&amp;#41; &amp;#40;+ 20 y&amp;#41;&amp;#41;
                     #&amp;#40;.lineTo ctx &amp;#40;+ 18 x&amp;#41; &amp;#40;+ 18 y&amp;#41;&amp;#41;
                     #&amp;#40;.lineTo ctx &amp;#40;+ 18 x&amp;#41; &amp;#40;+ 2 y&amp;#41;&amp;#41;&amp;#93;&amp;#41;&amp;#41;

&amp;#40;defn draw-block-bottom &amp;#91;x y ctx&amp;#93;
  &amp;#40;draw-block-x ctx &amp;#91;#&amp;#40;.moveTo ctx x &amp;#40;+ 20 y&amp;#41;&amp;#41;
                     #&amp;#40;.lineTo ctx &amp;#40;+ 20 x&amp;#41; &amp;#40;+ 20 y&amp;#41;&amp;#41;
                     #&amp;#40;.lineTo ctx &amp;#40;+ 18 x&amp;#41; &amp;#40;+ 18 y&amp;#41;&amp;#41;
                     #&amp;#40;.lineTo ctx &amp;#40;+ 2 x&amp;#41; &amp;#40;+ 18 y&amp;#41;&amp;#41;&amp;#93;&amp;#41;&amp;#41;
    
&lt;/code&gt;&lt;/pre&gt;And finally the function to draw a complete tetriminio which will call all four functions to draw the single blocks.&lt;pre&gt;&lt;code&gt;&amp;#40;defn draw-block &amp;#91;x y h ctx&amp;#93;
  &amp;#40;let &amp;#91;x' &amp;#40;&amp;#42; x 20&amp;#41;
        y' &amp;#40;&amp;#42; y 20&amp;#41;&amp;#93;                                        ; &amp;#40;&amp;#42; 20 &amp;#40;- 19 y&amp;#41;&amp;#41;
    &amp;#40;aset ctx &amp;quot;fillStyle&amp;quot; &amp;#40;str &amp;quot;hsl&amp;#40;&amp;quot; h &amp;quot;,100%,50%&amp;#41;&amp;quot;&amp;#41;&amp;#41;
    &amp;#40;.fillRect ctx &amp;#40;+ 2 x'&amp;#41; &amp;#40;+ 2 y'&amp;#41; 16 16&amp;#41;

    &amp;#40;aset ctx &amp;quot;fillStyle&amp;quot; &amp;#40;str &amp;quot;hsl&amp;#40;&amp;quot; h &amp;quot;,100%,70%&amp;#41;&amp;quot;&amp;#41;&amp;#41;
    &amp;#40;draw-block-top x' y' ctx&amp;#41;

    &amp;#40;aset ctx &amp;quot;fillStyle&amp;quot; &amp;#40;str &amp;quot;hsl&amp;#40;&amp;quot; h &amp;quot;,100%,40%&amp;#41;&amp;quot;&amp;#41;&amp;#41;
    &amp;#40;draw-block-left x' y' ctx&amp;#41;

    &amp;#40;draw-block-right x' y' ctx&amp;#41;

    &amp;#40;aset ctx &amp;quot;fillStyle&amp;quot; &amp;#40;str &amp;quot;hsl&amp;#40;&amp;quot; h &amp;quot;,100%,30%&amp;#41;&amp;quot;&amp;#41;&amp;#41;
    &amp;#40;draw-block-bottom x' y' ctx&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;strong&gt;draw-grid&lt;/strong&gt; function draws the complete tetris grid which has a width of 200px and a height of 400pxs.&lt;br /&gt;  it takes a &lt;strong&gt;grid&lt;/strong&gt; as a param which is a 2 dimensional vector whereas each x-y entry contains the element at that  place of the the grid:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn draw-grid &amp;#91;grid ctx&amp;#93;
  &amp;#40;.clearRect ctx 0 0 200 400&amp;#41;
  &amp;#40;doseq &amp;#91;x &amp;#40;range 10&amp;#41;
          y &amp;#40;range 20&amp;#41;&amp;#93;
    &amp;#40;let &amp;#91;t &amp;#40;get-in grid &amp;#91;x y&amp;#93;&amp;#41;&amp;#93;
      &amp;#40;when-not &amp;#40;= 0 t&amp;#41;
        &amp;#40;draw-block x y &amp;#40;get color-map t&amp;#41; ctx&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;  
&lt;/code&gt;&lt;/pre&gt;
</description>
<pubDate>
Sun, 31 May 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://tales.sveri.de/posts/2015-05-31-tetris-3.html
</guid>
<link>
http://tales.sveri.de/posts/2015-05-31-tetris-3.html
</link>
<title>
Tetris in clojurescript and re-frame Part 3
</title>
<description>
 &lt;h2&gt;&lt;a name=&quot;app&amp;#95;state&quot;&gt;&lt;/a&gt;App State&lt;/h2&gt;&lt;p&gt;There is a big conceptual difference between javasrcipt and clojurescript (especially in re-frame). Whereas in  javascript you can have as much global state as you want it is discouraged to do so in the cljs-sphere. It is generally advised to have one to a few atoms containing your global application state.&lt;br /&gt; In re-frame it is even more better, you don't declare an atom or global state at all, it is managed by re-frame  completely.&lt;/p&gt;&lt;p&gt;In re-frame there is data flowing in events, this is the general idea, for a very complete documentation, please look here: &lt;a href='https://github.com/Day8/re-frame'&gt;re-frame&lt;/a&gt;&lt;/p&gt;&lt;p&gt;First we will initialize the app state. As you saw in part 2 there is already a call to the dispatch function doing that: &lt;strong&gt;(rf/dispatch [:initialise-db])&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Now we will add a new file &lt;strong&gt;handlers.cljs&lt;/strong&gt; with the following content:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn get-clean-db-state &amp;#91;&amp;#93;
  {:ctx            &amp;#40;.getContext &amp;#40;h/get-elem &amp;quot;tetris-canv&amp;quot;&amp;#41; &amp;quot;2d&amp;quot;&amp;#41;
   :grid-state     &amp;#91;&amp;#91;&amp;#93; &amp;#91;&amp;#93;&amp;#93;
   :initialized?   true
   :started?       false
   :grid-h         20
   :grid-w         10
   :start-timestep 1000
   :timestep-dim   0.1}&amp;#41;

&amp;#40;register-handler
  :initialise-db
  &amp;#40;fn &amp;#91;&amp;#95; &amp;#95;&amp;#93;
    &amp;#40;get-clean-db-state&amp;#41;&amp;#41;&amp;#41;
    
&lt;/code&gt;&lt;/pre&gt;The first function returns a map which is the app state of the application after the initialization. This is where westore our &lt;i&gt;global&lt;/i&gt; and &lt;i&gt;local&lt;/i&gt; data. Also you can see that we finally initialize the canvas and also store thatin the app state.&lt;br /&gt;The second function &lt;strong&gt;register-handler&lt;/strong&gt; registers a handler for the &lt;strong&gt;:initialize-db&lt;/strong&gt; event. This will be calledwhenever we call &lt;strong&gt;(re-frame/dispatch [:initialise-db])&lt;/strong&gt; and for now it returns the app state from &lt;strong&gt;get-clean-db-state&lt;/strong&gt;.&lt;p&gt;A &lt;strong&gt;register-handler&lt;/strong&gt; function will always have to return the app state, no matter if it was manipulated or not.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;:ctx is a reference to the canvas element&lt;/li&gt;&lt;li&gt;:grid-state is a 2-dimensional vector which represents the tetris field. Each entry will represent a tetriminio(1 - 7) or nothing (0).&lt;/li&gt;&lt;li&gt;:started? indicates whether the game was started or not&lt;/li&gt;&lt;li&gt;:grid-w and :grid-h are the respective width and height entries&lt;/li&gt;&lt;li&gt;:start-timestep is the time for the ticker at which the game will run.&lt;/li&gt;&lt;li&gt;:timestep-dim is the percentage at that the ticker speed will be reduced after each level up&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Sun, 31 May 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://tales.sveri.de/posts/2015-05-31-tetris-2.html
</guid>
<link>
http://tales.sveri.de/posts/2015-05-31-tetris-2.html
</link>
<title>
Tetris in clojurescript and re-frame Part 2 - Basic Layout
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;html&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;p&gt;First he starts with the HTML part for the application. This is the code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{% extends &amp;quot;base.html&amp;quot; %}
{% block content %}

&amp;lt;div id=&amp;quot;tetris-main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
{% endblock %}

{% block js-bottom %}
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;de.sveri.omtet.tetris.core.main&amp;#40;&amp;#41;;&amp;lt;/script&amp;gt;
{% endblock %}    
&lt;/code&gt;&lt;/pre&gt;I am using selmer as a templating engine, so all you see here is the main div where the clojurescript will attach toand the call of the clojurescript tetris main function.&lt;br /&gt;You can find the code here: &lt;a href='https://github.com/sveri/omtet/blob/single&amp;#95;player&amp;#95;0.1/resources/templates/tetris/index.html'&gt;index.html&lt;/a&gt;&lt;h2&gt;&lt;a name=&quot;canvas&quot;&gt;&lt;/a&gt;Canvas&lt;/h2&gt;&lt;p&gt;This is where we are already starting to use clojurescript and this differs from the original tutorial. Instead of defining the canvas in plain html we will use reagent for this.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn &amp;#94;:export main &amp;#91;&amp;#93;
  &amp;#40;rf/dispatch &amp;#91;:initialise-db&amp;#93;&amp;#41;
  &amp;#40;reagent/render-component &amp;#40;fn &amp;#91;&amp;#93; &amp;#91;core&amp;#93;&amp;#41; &amp;#40;h/get-elem &amp;quot;tetris-main&amp;quot;&amp;#41;&amp;#41;&amp;#41;   
&lt;/code&gt;&lt;/pre&gt;This is the main function that is called from the html file. It will render a &lt;strong&gt;core&lt;/strong&gt; function on the &lt;strong&gt;tetris-main&lt;/strong&gt; html div. The ^export directive says that the main functions name should not be minimized so that it can be called from the html file.&lt;br /&gt;&lt;p&gt;This is the core function: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn core &amp;#91;&amp;#93;
  &amp;#40;let &amp;#91;tet-width &amp;quot;200px&amp;quot;&amp;#93;
    &amp;#91;:div.row
     &amp;#91;:div.col-md-3
      &amp;#91;:canvas#tetris-canv {:height &amp;quot;400px&amp;quot; :width tet-width :style {:background-color &amp;quot;#444444&amp;quot;}}&amp;#93;
      &amp;#91;:div#score {:style {:background-color &amp;quot;#CCCCCC&amp;quot; :width tet-width}} &amp;quot;Score: &amp;quot;&amp;#93;&amp;#93;
     &amp;#91;:div.col-md-3
      &amp;#91;:div
       &amp;#91;:button.btn.btn-primary
        {:on-click #&amp;#40;rf/dispatch &amp;#91;:start-game&amp;#93;&amp;#41;} &amp;quot;Start&amp;quot;&amp;#93;
       &amp;#91;:br&amp;#93;
       &amp;#91;:button.btn.btn-primary {:on-click #&amp;#40;rf/dispatch &amp;#91;:restart-game&amp;#93;&amp;#41;} &amp;quot;Restart&amp;quot;&amp;#93;&amp;#93;&amp;#93;&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;This just defines the HTML structure of the canvas and two buttons. One to start the game and one to restart the game.There is also a Score panel beneath the canvas.&lt;br /&gt;&lt;p&gt;One thing to note here are the &lt;strong&gt;#(rf/dispatch...&lt;/strong&gt; functions. &lt;em&gt;rf&lt;/em&gt; is the re-frame namespace and &lt;em&gt;dispatch&lt;/em&gt; will be called when a click on the respective button was done.&lt;/p&gt;&lt;p&gt;Every &lt;strong&gt;dispatch&lt;/strong&gt; function takes 1..n arguments whereas the first one is always a vector containing the event id path. In these cases: &lt;em&gt;:start-game&lt;/em&gt; and &lt;em&gt;:restart-game&lt;/em&gt;, which do what their name implies.&lt;/p&gt;&lt;p&gt;We will not init the canvas itself yet. This will be done as part of the application state initalization.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;sourcecode&quot;&gt;&lt;/a&gt;Sourcecode&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/sveri/omtet/blob/Part2/src/cljs/de/sveri/omtet/tetris/core.cljs'&gt;Part 2 - core.cljs&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>
Sun, 31 May 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://tales.sveri.de/posts/2015-05-31-tetris-1.html
</guid>
<link>
http://tales.sveri.de/posts/2015-05-31-tetris-1.html
</link>
<title>
Tetris in clojurescript and re-frame Part 1
</title>
<description>
 &lt;h1&gt;&lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;In the last few weeks I took some time to code tetris with clojurescript and re-frame following this guide:  &lt;a href='http://www.drewbuck.com/tetris-in-html5-for-noobs/'&gt;Tetris in HTML5 for noobs&lt;/a&gt;.&lt;br /&gt; I will write a small series following the same pattern showing how it is done in cljs. What I will not do is explain basic things like the original author did, but instead focus more on the differences between javascript and  clojurescript.&lt;/p&gt;&lt;p&gt;For every beginner I recommend following Drews tutorial as he is more in depth about the basics of everything.&lt;/p&gt;&lt;p&gt;A big thanks to the original author &lt;a href='http://www.drewbuck.com/about/'&gt;Drew Buck&lt;/a&gt; that got showed how to make tetris  work with the HTML 5 canvas feature!&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;disclaimer&quot;&gt;&lt;/a&gt;Disclaimer&lt;/h1&gt;&lt;p&gt;I have done this as part of a bigger project which you can find here: &lt;a href='https://github.com/sveri/omtet'&gt;omtet&lt;/a&gt;.&lt;br /&gt; I will only mention a few source files in this tutorial, you can safely ignore the rest of it. The relevant files are these:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/sveri/omtet/blob/single&amp;#95;player&amp;#95;0.1/resources/templates/tetris/index.html'&gt;index.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/sveri/omtet/blob/single&amp;#95;player&amp;#95;0.1/src/cljs/de/sveri/omtet/tetris/core.cljs'&gt;core.cljs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/sveri/omtet/blob/single&amp;#95;player&amp;#95;0.1/src/cljs/de/sveri/omtet/tetris/handlers.cljs'&gt;handlers.cljs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/sveri/omtet/blob/single&amp;#95;player&amp;#95;0.1/src/cljs/de/sveri/omtet/tetris/subs.cljs'&gt;subs.cljs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/sveri/omtet/blob/single&amp;#95;player&amp;#95;0.1/src/cljs/de/sveri/omtet/tetris/tetriminios.cljs'&gt;tetriminios.cljs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Sun, 31 May 2015 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://tales.sveri.de/posts/2015-05-31-first-post.html
</guid>
<link>
http://tales.sveri.de/posts/2015-05-31-first-post.html
</link>
<title>
First Post
</title>
<description>
&lt;h3&gt;&lt;a name=&quot;first&amp;#95;post&amp;#95;in&amp;#95;my&amp;#95;new&amp;#95;blog&quot;&gt;&lt;/a&gt;First Post in my new blog&lt;/h3&gt;&lt;p&gt;I got tired of wordpress and so decided to play around with &lt;a href='https://github.com/cryogen-project/cryogen'&gt;cryogen&lt;/a&gt;  for static site generation. My old blog of course will be available as usual under &lt;a href=&quot;http://blog.sveri.de&quot;&gt;http://blog.sveri.de&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>
Sun, 31 May 2015 00:00:00 +0200
</pubDate>
</item>
</channel>
</rss>
